1. Javascript is a High Level, Object Oriented, Multi Paradigm programming language.
    High Level : Don't have to worry about low level memory management.
    Object Oriented : Uses the concepts of classes and objects.
    Multi Paradigm : Different styles of programming can be used (Like Imperative and Declarative).

2. Use camel casing for variable declaration. Variables cannot begin with a number. Variables can only contain
    alphabets, numbers, underscore and dollar($) sign. Cannot use reserved Javascript keywords to name variables(name is the 
    only exception, it can be used as a variable, but still should be avoided).

3. Use capitalized variable names for classes (class Person) and uppercase variable names for mathematical constants 
    (e.g. PI = 3.1415). Variables should be very descriptive.

4. There are 7 types of primitive data types.
    1. Number : Floating point numbers. Used for decimal and integers.
    2. Strings : Sequence of characters. Used for text.
    3. Boolean : True or False.
    4. Undefined : Value taken by a variable that is not yet defined. (empty value)
    5. Null : Also means empty values but used in different curcumstances.
    6. Symbol : Value that is unique and cannot be changed.
    7. BigInt : Larger integers than the number type can hold.

    Javascript has dynamic typing. We do not have to manually define data types for variables.
    typeof undefined variable is also undefined.
    typeof null is an object. (This is a bug in Javascript).

5. let and const were introduced in es6, var is old javascript.
   let can be reassigned. (Mutable variable)
   const is used for variables that are not supposed to change at any point in the future. (Immutable variable)
   Since const variables are immutable, empty const variables cannot be declared.

6. 2 ** 3 is 2 to the power 3 which is exponentiation operator.

7. `${} hello etc` way of formatting strings is called a template literal. 
    When you need to create a multiline string just do this:

    const str = `This is
    a multiline
    string.`

8. '1771' + 10 will give us 177110. NaN means not a number or an invalid number.
    Use Number(x) to convert x to number.
    Use String(x) to convert x to string.
    Type conversion is the process of changing datatype of a variable manually.
    Type coercion is where javascript itself changes the datatype of a variable in order for an expression to 
    evaluate successfully.

9. There are 5 falsy values : null, undefined, '', 0, NaN. They become false when converted to boolean.

10.
    === is Strict equality operator and == is loose equality operator.
    === does not perform type coercion. == performs type coercion.
    != and !== are the not equal variants.

11. if(23 > 11) {  This is a statement
        const str = '23 is greater than 11';
    }

    23 > 11 This is an expression
    a && b || c This is also an expression

12. 'use strict' activates strict mode. Strict mode helps us to write safe and secure code.Strict mode forbids us to do 
    certain things. It also creates errors in the console where standard javascript would simply fail silently. For 
    example if you misspell a variable name, standard javascript console would not detect it, but using strict mode will 
    detect it. It also prevents us from using reserved keywords for future version of javascript as variable names. 
    eg. interface, private etc.

13. function(birthYear) {return 2037 - birthYear} This is an example of function declaration.

    const calcAge2 = function (birthYear) {  This is an example of function expression.
        return 2037 - birthYear;
    }

    Function declaration can be called before they are defined. This will not work with function expression.

    const calcAge3 = birthYear => 2037 - birthYear; (Arrow Function, one line and one argument)
    const makeJuice = (apples, oranges) => {  (Arrow Function with multiple lines and multiple arguments)
        const applePieces = apples * 4;
        const orangePieces = oranges * 4;
        return `We made juice using ${applePieces + orangePieces} fruit pieces.`;
    }

14. There are 2 ways to initialize arrays:
    1. const friends = ['Michael', 'Lucifer', 'Gabriel'];
       const friends = new Array('Michael', 'Lucifer', 'Gabriel');

       Only primitive values are immutable, that's why you cannot change a constant number. However arrays are mutable
       even if declared using a const.

15. Some array methods:
    1. push(arg) : Pushes a new element at the end of the array. Also returns the length of the new array.
    2. unshift(arg) : Pushes a new element at the beginning of the array. Also returns the length of the new array.
    3. pop() : Removes the last element of the array. Returns the popped element.
    4. shift() : Removes the first element of the array. Returns the first element.
    5 indexOf(arg) : Returns the index of the element. Returns -1 if element not present.
    6 includes(arg) : Returns true if element is present, false otherwise.

16. Use bracket notation when object property needs to be computed or have the property inside a variable.
    Use dot notation when you already have the object property by name.
    If you try to access a property that does not exist for an object, you will get undefined.

17. this keyword is the one which calls the property function.

    eg : 
    const obj = {
        birthYear : 1997,
        calcAge : function() {
            return 2037 - this.birthYear
        }
    }

    console.log(obj.calcAge()); Since obj calls the calcAge function, obj is this.

18. break and continue work in for loops, not in for-each loops. If you do not need a loop to depend upon a counter use
    a while loop.